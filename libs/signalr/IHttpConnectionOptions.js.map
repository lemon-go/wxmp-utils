{"version":3,"file":"IHttpConnectionOptions.js","sourceRoot":"","sources":["../../src/IHttpConnectionOptions.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { HttpClient } from \"./HttpClient\";\nimport { MessageHeaders } from \"./IHubProtocol\";\nimport { ILogger, LogLevel } from \"./ILogger\";\nimport { HttpTransportType, ITransport } from \"./ITransport\";\nimport { EventSourceConstructor, WebSocketConstructor } from \"./Polyfills\";\n\n/** Options provided to the 'withUrl' method on {@link @microsoft/signalr.HubConnectionBuilder} to configure options for the HTTP-based transports. */\nexport interface IHttpConnectionOptions {\n    /** {@link @microsoft/signalr.MessageHeaders} containing custom headers to be sent with every HTTP request. Note, setting headers in the browser will not work for WebSockets or the ServerSentEvents stream. */\n    headers?: MessageHeaders;\n\n    /** An {@link @microsoft/signalr.HttpClient} that will be used to make HTTP requests. */\n    httpClient?: HttpClient;\n\n    /** An {@link @microsoft/signalr.HttpTransportType} value specifying the transport to use for the connection. */\n    transport?: HttpTransportType | ITransport;\n\n    /** Configures the logger used for logging.\n     *\n     * Provide an {@link @microsoft/signalr.ILogger} instance, and log messages will be logged via that instance. Alternatively, provide a value from\n     * the {@link @microsoft/signalr.LogLevel} enumeration and a default logger which logs to the Console will be configured to log messages of the specified\n     * level (or higher).\n     */\n    logger?: ILogger | LogLevel;\n\n    /** A function that provides an access token required for HTTP Bearer authentication.\n     *\n     * @returns {string | Promise<string>} A string containing the access token, or a Promise that resolves to a string containing the access token.\n     */\n    accessTokenFactory?(): string | Promise<string>;\n\n    /** A boolean indicating if message content should be logged.\n     *\n     * Message content can contain sensitive user data, so this is disabled by default.\n     */\n    logMessageContent?: boolean;\n\n    /** A boolean indicating if negotiation should be skipped.\n     *\n     * Negotiation can only be skipped when the {@link @microsoft/signalr.IHttpConnectionOptions.transport} property is set to 'HttpTransportType.WebSockets'.\n     */\n    skipNegotiation?: boolean;\n\n    // Used for unit testing and code spelunkers\n    /** A constructor that can be used to create a WebSocket.\n     *\n     * @internal\n     */\n    WebSocket?: WebSocketConstructor;\n\n    // Used for unit testing and code spelunkers\n    /** A constructor that can be used to create an EventSource.\n     *\n     * @internal\n     */\n    EventSource?: EventSourceConstructor;\n\n    /**\n     * Default value is 'true'.\n     * This controls whether credentials such as cookies are sent in cross-site requests.\n     *\n     * Cookies are used by many load-balancers for sticky sessions which is required when your app is deployed with multiple servers.\n     */\n    withCredentials?: boolean;\n}\n"]}