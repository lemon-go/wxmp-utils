{"version":3,"file":"Stream.js","sourceRoot":"","sources":["../../src/Stream.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// This is an API that is similar to Observable, but we don't want users to confuse it for that so we rename things. Someone could\n// easily adapt it into the Rx interface if they wanted to. Unlike in C#, we can't just implement an \"interface\" and get extension\n// methods for free. The methods have to actually be added to the object (there are no extension methods in JS!). We don't want to\n// depend on RxJS in the core library, so instead we duplicate the minimum logic needed and then users can easily adapt these into\n// proper RxJS observables if they want.\n\n/** Defines the expected type for a receiver of results streamed by the server.\n *\n * @typeparam T The type of the items being sent by the server.\n */\nexport interface IStreamSubscriber<T> {\n    /** A boolean that will be set by the {@link @microsoft/signalr.IStreamResult} when the stream is closed. */\n    closed?: boolean;\n    /** Called by the framework when a new item is available. */\n    next(value: T): void;\n    /** Called by the framework when an error has occurred.\n     *\n     * After this method is called, no additional methods on the {@link @microsoft/signalr.IStreamSubscriber} will be called.\n     */\n    error(err: any): void;\n    /** Called by the framework when the end of the stream is reached.\n     *\n     * After this method is called, no additional methods on the {@link @microsoft/signalr.IStreamSubscriber} will be called.\n     */\n    complete(): void;\n}\n\n/** Defines the result of a streaming hub method.\n *\n * @typeparam T The type of the items being sent by the server.\n */\nexport interface IStreamResult<T> {\n    /** Attaches a {@link @microsoft/signalr.IStreamSubscriber}, which will be invoked when new items are available from the stream.\n     *\n     * @param {IStreamSubscriber<T>} observer The subscriber to attach.\n     * @returns {ISubscription<T>} A subscription that can be disposed to terminate the stream and stop calling methods on the {@link @microsoft/signalr.IStreamSubscriber}.\n     */\n    subscribe(subscriber: IStreamSubscriber<T>): ISubscription<T>;\n}\n\n/** An interface that allows an {@link @microsoft/signalr.IStreamSubscriber} to be disconnected from a stream.\n *\n * @typeparam T The type of the items being sent by the server.\n */\n// @ts-ignore: We can't remove this, it's a breaking change, but it's not used.\nexport interface ISubscription<T> {\n    /** Disconnects the {@link @microsoft/signalr.IStreamSubscriber} associated with this subscription from the stream. */\n    dispose(): void;\n}\n"]}