{"version":3,"file":"AbortController.js","sourceRoot":"","sources":["../../src/AbortController.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;AAE/G,qFAAqF;AACrF,0FAA0F;AAC1F,iCAAiC;AAEjC,2BAA2B;AAC3B,eAAe;AACf;IAAA;QACY,cAAS,GAAY,KAAK,CAAC;QAC5B,YAAO,GAAwB,IAAI,CAAC;IAkB/C,CAAC;IAhBU,+BAAK,GAAZ;QACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;SACJ;IACL,CAAC;IAED,sBAAI,mCAAM;aAAV;YACI,OAAO,IAAI,CAAC;QAChB,CAAC;;;OAAA;IAED,sBAAI,oCAAO;aAAX;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IACL,sBAAC;AAAD,CAAC,AApBD,IAoBC","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\n// it's a very new API right now.\n\n// Not exported from index.\n/** @private */\nexport class AbortController implements AbortSignal {\n    private isAborted: boolean = false;\n    public onabort: (() => void) | null = null;\n\n    public abort() {\n        if (!this.isAborted) {\n            this.isAborted = true;\n            if (this.onabort) {\n                this.onabort();\n            }\n        }\n    }\n\n    get signal(): AbortSignal {\n        return this;\n    }\n\n    get aborted(): boolean {\n        return this.isAborted;\n    }\n}\n\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\nexport interface AbortSignal {\n    /** Indicates if the request has been aborted. */\n    aborted: boolean;\n    /** Set this to a handler that will be invoked when the request is aborted. */\n    onabort: (() => void) | null;\n}\n"]}