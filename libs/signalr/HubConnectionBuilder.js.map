{"version":3,"file":"HubConnectionBuilder.js","sourceRoot":"","sources":["../../src/HubConnectionBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\nimport { IHubProtocol } from \"./IHubProtocol\";\nimport { ILogger, LogLevel } from \"./ILogger\";\nimport { IRetryPolicy } from \"./IRetryPolicy\";\nimport { HttpTransportType } from \"./ITransport\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\n\n// tslint:disable:object-literal-sort-keys\nconst LogLevelNameMapping = {\n    trace: LogLevel.Trace,\n    debug: LogLevel.Debug,\n    info: LogLevel.Information,\n    information: LogLevel.Information,\n    warn: LogLevel.Warning,\n    warning: LogLevel.Warning,\n    error: LogLevel.Error,\n    critical: LogLevel.Critical,\n    none: LogLevel.None,\n};\n\nfunction parseLogLevel(name: string): LogLevel {\n    // Case-insensitive matching via lower-casing\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\n    if (typeof mapping !== \"undefined\") {\n        return mapping;\n    } else {\n        throw new Error(`Unknown log level: ${name}`);\n    }\n}\n\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\nexport class HubConnectionBuilder {\n    /** @internal */\n    public protocol?: IHubProtocol;\n    /** @internal */\n    public httpConnectionOptions?: IHttpConnectionOptions;\n    /** @internal */\n    public url?: string;\n    /** @internal */\n    public logger?: ILogger;\n\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\n    /** @internal */\n    public reconnectPolicy?: IRetryPolicy;\n\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\n     *\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\n\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\n     *\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\n\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\n     *\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\n     */\n    public configureLogging(logLevel: string): HubConnectionBuilder;\n\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\n     *\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\n        Arg.isRequired(logging, \"logging\");\n\n        if (isLogger(logging)) {\n            this.logger = logging;\n        } else if (typeof logging === \"string\") {\n            const logLevel = parseLogLevel(logging);\n            this.logger = new ConsoleLogger(logLevel);\n        } else {\n            this.logger = new ConsoleLogger(logging);\n        }\n\n        return this;\n    }\n\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\n     *\n     * The transport will be selected automatically based on what the server and client support.\n     *\n     * @param {string} url The URL the connection will use.\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public withUrl(url: string): HubConnectionBuilder;\n\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\n     *\n     * @param {string} url The URL the connection will use.\n     * @param {HttpTransportType} transportType The specific transport to use.\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\n\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\n     *\n     * @param {string} url The URL the connection will use.\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\n        Arg.isRequired(url, \"url\");\n        Arg.isNotEmpty(url, \"url\");\n\n        this.url = url;\n\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n        if (typeof transportTypeOrOptions === \"object\") {\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\n        } else {\n            this.httpConnectionOptions = {\n                ...this.httpConnectionOptions,\n                transport: transportTypeOrOptions,\n            };\n        }\n\n        return this;\n    }\n\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\n     *\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\n     */\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\n        Arg.isRequired(protocol, \"protocol\");\n\n        this.protocol = protocol;\n        return this;\n    }\n\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\n     */\n    public withAutomaticReconnect(): HubConnectionBuilder;\n\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\n     *\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\n     */\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\n\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\n     *\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\n     */\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\n        if (this.reconnectPolicy) {\n            throw new Error(\"A reconnectPolicy has already been set.\");\n        }\n\n        if (!retryDelaysOrReconnectPolicy) {\n            this.reconnectPolicy = new DefaultReconnectPolicy();\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n        } else {\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n        }\n\n        return this;\n    }\n\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\n     *\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\n     */\n    public build(): HubConnection {\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n        // provided to configureLogger\n        const httpConnectionOptions = this.httpConnectionOptions || {};\n\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n        if (httpConnectionOptions.logger === undefined) {\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n            httpConnectionOptions.logger = this.logger;\n        }\n\n        // Now create the connection\n        if (!this.url) {\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n        }\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\n\n        return HubConnection.create(\n            connection,\n            this.logger || NullLogger.instance,\n            this.protocol || new JsonHubProtocol(),\n            this.reconnectPolicy);\n    }\n}\n\nfunction isLogger(logger: any): logger is ILogger {\n    return logger.log !== undefined;\n}\n"]}