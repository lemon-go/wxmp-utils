{"version":3,"file":"IHubProtocol.js","sourceRoot":"","sources":["../../src/IHubProtocol.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;AAK/G,yCAAyC;AACzC,MAAM,CAAN,IAAY,WAeX;AAfD,WAAY,WAAW;IACnB,gIAAgI;IAChI,yDAAc,CAAA;IACd,+HAA+H;IAC/H,yDAAc,CAAA;IACd,+HAA+H;IAC/H,yDAAc,CAAA;IACd,4IAA4I;IAC5I,qEAAoB,CAAA;IACpB,4IAA4I;IAC5I,qEAAoB,CAAA;IACpB,mHAAmH;IACnH,6CAAQ,CAAA;IACR,qHAAqH;IACrH,+CAAS,CAAA;AACb,CAAC,EAfW,WAAW,KAAX,WAAW,QAetB","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { ILogger } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\n\n/** Defines the type of a Hub Message. */\nexport enum MessageType {\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\n    Invocation = 1,\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\n    StreamItem = 2,\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\n    Completion = 3,\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\n    StreamInvocation = 4,\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\n    CancelInvocation = 5,\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\n    Ping = 6,\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\n    Close = 7,\n}\n\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\nexport interface MessageHeaders {\n    /** Gets or sets the header with the specified key. */\n    [key: string]: string;\n}\n\n/** Union type of all known Hub messages. */\nexport type HubMessage =\n    InvocationMessage |\n    StreamInvocationMessage |\n    StreamItemMessage |\n    CompletionMessage |\n    CancelInvocationMessage |\n    PingMessage |\n    CloseMessage;\n\n/** Defines properties common to all Hub messages. */\nexport interface HubMessageBase {\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\n    readonly type: MessageType;\n}\n\n/** Defines properties common to all Hub messages relating to a specific invocation. */\nexport interface HubInvocationMessage extends HubMessageBase {\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\n    readonly headers?: MessageHeaders;\n    /** The ID of the invocation relating to this message.\n     *\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\n     */\n    readonly invocationId?: string;\n}\n\n/** A hub message representing a non-streaming invocation. */\nexport interface InvocationMessage extends HubInvocationMessage {\n    /** @inheritDoc */\n    readonly type: MessageType.Invocation;\n    /** The target method name. */\n    readonly target: string;\n    /** The target method arguments. */\n    readonly arguments: any[];\n    /** The target methods stream IDs. */\n    readonly streamIds?: string[];\n}\n\n/** A hub message representing a streaming invocation. */\nexport interface StreamInvocationMessage extends HubInvocationMessage {\n    /** @inheritDoc */\n    readonly type: MessageType.StreamInvocation;\n\n    /** The invocation ID. */\n    readonly invocationId: string;\n    /** The target method name. */\n    readonly target: string;\n    /** The target method arguments. */\n    readonly arguments: any[];\n    /** The target methods stream IDs. */\n    readonly streamIds?: string[];\n}\n\n/** A hub message representing a single item produced as part of a result stream. */\nexport interface StreamItemMessage extends HubInvocationMessage {\n    /** @inheritDoc */\n    readonly type: MessageType.StreamItem;\n\n    /** The invocation ID. */\n    readonly invocationId: string;\n\n    /** The item produced by the server. */\n    readonly item?: any;\n}\n\n/** A hub message representing the result of an invocation. */\nexport interface CompletionMessage extends HubInvocationMessage {\n    /** @inheritDoc */\n    readonly type: MessageType.Completion;\n    /** The invocation ID. */\n    readonly invocationId: string;\n    /** The error produced by the invocation, if any.\n     *\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\n     */\n    readonly error?: string;\n    /** The result produced by the invocation, if any.\n     *\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\n     */\n    readonly result?: any;\n}\n\n/** A hub message indicating that the sender is still active. */\nexport interface PingMessage extends HubMessageBase {\n    /** @inheritDoc */\n    readonly type: MessageType.Ping;\n}\n\n/** A hub message indicating that the sender is closing the connection.\n *\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\n */\nexport interface CloseMessage extends HubMessageBase {\n    /** @inheritDoc */\n    readonly type: MessageType.Close;\n    /** The error that triggered the close, if any.\n     *\n     * If this property is undefined, the connection was closed normally and without error.\n     */\n    readonly error?: string;\n\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\n    readonly allowReconnect?: boolean;\n}\n\n/** A hub message sent to request that a streaming invocation be canceled. */\nexport interface CancelInvocationMessage extends HubInvocationMessage {\n    /** @inheritDoc */\n    readonly type: MessageType.CancelInvocation;\n    /** The invocation ID. */\n    readonly invocationId: string;\n}\n\n/** A protocol abstraction for communicating with SignalR Hubs.  */\nexport interface IHubProtocol {\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\n    readonly name: string;\n    /** The version of the protocol. */\n    readonly version: number;\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\n    readonly transferFormat: TransferFormat;\n\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\n     *\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\n     *\n     * @param {string | ArrayBuffer | Buffer} input A string, ArrayBuffer, or Buffer containing the serialized representation.\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\n     */\n    parseMessages(input: string | ArrayBuffer | Buffer, logger: ILogger): HubMessage[];\n\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\n     *\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\n     *\n     * @param {HubMessage} message The message to write.\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\n     */\n    writeMessage(message: HubMessage): string | ArrayBuffer;\n}\n"]}