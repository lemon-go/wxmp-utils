{"version":3,"file":"ILogger.js","sourceRoot":"","sources":["../../src/ILogger.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;AAE/G,2GAA2G;AAC3G;;;GAGG;AACH,MAAM,CAAN,IAAY,QAeX;AAfD,WAAY,QAAQ;IAChB,2DAA2D;IAC3D,yCAAS,CAAA;IACT,sDAAsD;IACtD,yCAAS,CAAA;IACT,uDAAuD;IACvD,qDAAe,CAAA;IACf,2EAA2E;IAC3E,6CAAW,CAAA;IACX,0FAA0F;IAC1F,yCAAS,CAAA;IACT,4GAA4G;IAC5G,+CAAY,CAAA;IACZ,wHAAwH;IACxH,uCAAQ,CAAA;AACZ,CAAC,EAfW,QAAQ,KAAR,QAAQ,QAenB","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\n/** Indicates the severity of a log message.\n *\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\n */\nexport enum LogLevel {\n    /** Log level for very low severity diagnostic messages. */\n    Trace = 0,\n    /** Log level for low severity diagnostic messages. */\n    Debug = 1,\n    /** Log level for informational diagnostic messages. */\n    Information = 2,\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\n    Warning = 3,\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\n    Error = 4,\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\n    Critical = 5,\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\n    None = 6,\n}\n\n/** An abstraction that provides a sink for diagnostic messages. */\nexport interface ILogger {\n    /** Called by the framework to emit a diagnostic message.\n     *\n     * @param {LogLevel} logLevel The severity level of the message.\n     * @param {string} message The message.\n     */\n    log(logLevel: LogLevel, message: string): void;\n}\n"]}