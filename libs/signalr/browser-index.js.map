{"version":3,"file":"browser-index.js","sourceRoot":"","sources":["../../src/browser-index.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;AAE/G,qHAAqH;AAErH,OAAO,sCAAsC,CAAC;AAE9C,uIAAuI;AACvI,wEAAwE;AACxE,8EAA8E;AAC9E,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE;IAC/B,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,EAAE;QACnD,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,OAAO;QAC9B,QAAQ,EAAE,IAAI;KACjB,CAAC,CAAC;CACN;AACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE;IAC7B,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,OAAO,EAAE;QACjD,wEAAwE;QACxE,oDAAoD;QACpD,KAAK,EAAE,UAAS,KAAc,EAAE,GAAY,IAAI,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACtH,QAAQ,EAAE,IAAI;KACjB,CAAC,CAAC;CACN;AACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE;IAC/B,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,EAAE;QACnD,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,OAAO;QAC9B,QAAQ,EAAE,IAAI;KACjB,CAAC,CAAC;CACN;AAED,cAAc,SAAS,CAAC","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\n\nimport \"es6-promise/dist/es6-promise.auto.js\";\n\n// Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties\n// that exist on Uint8Array with the same name, and JavaScript is magic.\n// We make them 'writable' because the Buffer polyfill messes with it as well.\nif (!Uint8Array.prototype.indexOf) {\n    Object.defineProperty(Uint8Array.prototype, \"indexOf\", {\n        value: Array.prototype.indexOf,\n        writable: true,\n    });\n}\nif (!Uint8Array.prototype.slice) {\n    Object.defineProperty(Uint8Array.prototype, \"slice\", {\n        // wrap the slice in Uint8Array so it looks like a Uint8Array.slice call\n        // tslint:disable-next-line:object-literal-shorthand\n        value: function(start?: number, end?: number) { return new Uint8Array(Array.prototype.slice.call(this, start, end)); },\n        writable: true,\n    });\n}\nif (!Uint8Array.prototype.forEach) {\n    Object.defineProperty(Uint8Array.prototype, \"forEach\", {\n        value: Array.prototype.forEach,\n        writable: true,\n    });\n}\n\nexport * from \"./index\";\n"]}