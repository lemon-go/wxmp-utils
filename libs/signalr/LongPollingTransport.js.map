{"version":3,"file":"LongPollingTransport.js","sourceRoot":"","sources":["../../src/LongPollingTransport.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\nimport { MessageHeaders } from \"./IHubProtocol\";\nimport { ILogger, LogLevel } from \"./ILogger\";\nimport { ITransport, TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\n\n// Not exported from 'index', this type is internal.\n/** @private */\nexport class LongPollingTransport implements ITransport {\n    private readonly httpClient: HttpClient;\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\n    private readonly logger: ILogger;\n    private readonly logMessageContent: boolean;\n    private readonly withCredentials: boolean;\n    private readonly pollAbort: AbortController;\n    private readonly headers: MessageHeaders;\n\n    private url?: string;\n    private running: boolean;\n    private receiving?: Promise<void>;\n    private closeError?: Error;\n\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\n    public onclose: ((error?: Error) => void) | null;\n\n    // This is an internal type, not exported from 'index' so this is really just internal.\n    public get pollAborted() {\n        return this.pollAbort.aborted;\n    }\n\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean, withCredentials: boolean, headers: MessageHeaders) {\n        this.httpClient = httpClient;\n        this.accessTokenFactory = accessTokenFactory;\n        this.logger = logger;\n        this.pollAbort = new AbortController();\n        this.logMessageContent = logMessageContent;\n        this.withCredentials = withCredentials;\n        this.headers = headers;\n\n        this.running = false;\n\n        this.onreceive = null;\n        this.onclose = null;\n    }\n\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\n        Arg.isRequired(url, \"url\");\n        Arg.isRequired(transferFormat, \"transferFormat\");\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n        this.url = url;\n\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\n\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n        if (transferFormat === TransferFormat.Binary &&\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n        }\n\n        const [name, value] = getUserAgentHeader();\n        const headers = { [name]: value, ...this.headers };\n\n        const pollOptions: HttpRequest = {\n            abortSignal: this.pollAbort.signal,\n            headers,\n            timeout: 100000,\n            withCredentials: this.withCredentials,\n        };\n\n        if (transferFormat === TransferFormat.Binary) {\n            pollOptions.responseType = \"arraybuffer\";\n        }\n\n        const token = await this.getAccessToken();\n        this.updateHeaderToken(pollOptions, token);\n\n        // Make initial long polling request\n        // Server uses first long polling request to finish initializing connection and it returns without data\n        const pollUrl = `${url}&_=${Date.now()}`;\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n        const response = await this.httpClient.get(pollUrl, pollOptions);\n        if (response.statusCode !== 200) {\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n\n            // Mark running as false so that the poll immediately ends and runs the close logic\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\n            this.running = false;\n        } else {\n            this.running = true;\n        }\n\n        this.receiving = this.poll(this.url, pollOptions);\n    }\n\n    private async getAccessToken(): Promise<string | null> {\n        if (this.accessTokenFactory) {\n            return await this.accessTokenFactory();\n        }\n\n        return null;\n    }\n\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\n        if (!request.headers) {\n            request.headers = {};\n        }\n        if (token) {\n            // tslint:disable-next-line:no-string-literal\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\n            return;\n        }\n        // tslint:disable-next-line:no-string-literal\n        if (request.headers[\"Authorization\"]) {\n            // tslint:disable-next-line:no-string-literal\n            delete request.headers[\"Authorization\"];\n        }\n    }\n\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\n        try {\n            while (this.running) {\n                // We have to get the access token on each poll, in case it changes\n                const token = await this.getAccessToken();\n                this.updateHeaderToken(pollOptions, token);\n\n                try {\n                    const pollUrl = `${url}&_=${Date.now()}`;\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\n\n                    if (response.statusCode === 204) {\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n\n                        this.running = false;\n                    } else if (response.statusCode !== 200) {\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n\n                        // Unexpected status code\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\n                        this.running = false;\n                    } else {\n                        // Process the response\n                        if (response.content) {\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}.`);\n                            if (this.onreceive) {\n                                this.onreceive(response.content);\n                            }\n                        } else {\n                            // This is another way timeout manifest.\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                        }\n                    }\n                } catch (e) {\n                    if (!this.running) {\n                        // Log but disregard errors that occur after stopping\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n                    } else {\n                        if (e instanceof TimeoutError) {\n                            // Ignore timeouts and reissue the poll.\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                        } else {\n                            // Close the connection with the error as the result.\n                            this.closeError = e;\n                            this.running = false;\n                        }\n                    }\n                }\n            }\n        } finally {\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\n\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n            if (!this.pollAborted) {\n                this.raiseOnClose();\n            }\n        }\n    }\n\n    public async send(data: any): Promise<void> {\n        if (!this.running) {\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n        }\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers);\n    }\n\n    public async stop(): Promise<void> {\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\n\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n        this.running = false;\n        this.pollAbort.abort();\n\n        try {\n            await this.receiving;\n\n            // Send DELETE to clean up long polling on the server\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\n\n            const headers = {};\n            const [name, value] = getUserAgentHeader();\n            headers[name] = value;\n\n            const deleteOptions: HttpRequest = {\n                headers: { ...headers, ...this.headers },\n                withCredentials: this.withCredentials,\n            };\n            const token = await this.getAccessToken();\n            this.updateHeaderToken(deleteOptions, token);\n            await this.httpClient.delete(this.url!, deleteOptions);\n\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n        } finally {\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\n\n            // Raise close event here instead of in polling\n            // It needs to happen after the DELETE request is sent\n            this.raiseOnClose();\n        }\n    }\n\n    private raiseOnClose() {\n        if (this.onclose) {\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\n            if (this.closeError) {\n                logMessage += \" Error: \" + this.closeError;\n            }\n            this.logger.log(LogLevel.Trace, logMessage);\n            this.onclose(this.closeError);\n        }\n    }\n}\n"]}