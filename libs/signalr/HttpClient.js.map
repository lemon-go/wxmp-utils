{"version":3,"file":"HttpClient.js","sourceRoot":"","sources":["../../src/HttpClient.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;;;;;;;;;AAgC/G,mCAAmC;AACnC;IAqCI,sBACoB,UAAkB,EAClB,UAAmB,EACnB,OAA8B;QAF9B,eAAU,GAAV,UAAU,CAAQ;QAClB,eAAU,GAAV,UAAU,CAAS;QACnB,YAAO,GAAP,OAAO,CAAuB;IAClD,CAAC;IACL,mBAAC;AAAD,CAAC,AA1CD,IA0CC;;AAED;;;GAGG;AACH;IAAA;IAmFA,CAAC;IApEU,wBAAG,GAAV,UAAW,GAAW,EAAE,OAAqB;QACzC,OAAO,IAAI,CAAC,IAAI,cACT,OAAO,IACV,MAAM,EAAE,KAAK,EACb,GAAG,KAAA,IACL,CAAC;IACP,CAAC;IAgBM,yBAAI,GAAX,UAAY,GAAW,EAAE,OAAqB;QAC1C,OAAO,IAAI,CAAC,IAAI,cACT,OAAO,IACV,MAAM,EAAE,MAAM,EACd,GAAG,KAAA,IACL,CAAC;IACP,CAAC;IAgBM,2BAAM,GAAb,UAAc,GAAW,EAAE,OAAqB;QAC5C,OAAO,IAAI,CAAC,IAAI,cACT,OAAO,IACV,MAAM,EAAE,QAAQ,EAChB,GAAG,KAAA,IACL,CAAC;IACP,CAAC;IASD;;;;OAIG;IACH,aAAa;IACN,oCAAe,GAAtB,UAAuB,GAAW;QAC9B,OAAO,EAAE,CAAC;IACd,CAAC;IACL,iBAAC;AAAD,CAAC,AAnFD,IAmFC","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { AbortSignal } from \"./AbortController\";\nimport { MessageHeaders } from \"./IHubProtocol\";\n\n/** Represents an HTTP request. */\nexport interface HttpRequest {\n    /** The HTTP method to use for the request. */\n    method?: string;\n\n    /** The URL for the request. */\n    url?: string;\n\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\n    content?: string | ArrayBuffer;\n\n    /** An object describing headers to apply to the request. */\n    headers?: MessageHeaders;\n\n    /** The XMLHttpRequestResponseType to apply to the request. */\n    responseType?: XMLHttpRequestResponseType;\n\n    /** An AbortSignal that can be monitored for cancellation. */\n    abortSignal?: AbortSignal;\n\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\n    timeout?: number;\n\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\n    withCredentials?: boolean;\n}\n\n/** Represents an HTTP response. */\nexport class HttpResponse {\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\n     *\n     * @param {number} statusCode The status code of the response.\n     */\n    constructor(statusCode: number);\n\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\n     *\n     * @param {number} statusCode The status code of the response.\n     * @param {string} statusText The status message of the response.\n     */\n    constructor(statusCode: number, statusText: string);\n\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\n     *\n     * @param {number} statusCode The status code of the response.\n     * @param {string} statusText The status message of the response.\n     * @param {string} content The content of the response.\n     */\n    constructor(statusCode: number, statusText: string, content: string);\n\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\n     *\n     * @param {number} statusCode The status code of the response.\n     * @param {string} statusText The status message of the response.\n     * @param {ArrayBuffer} content The content of the response.\n     */\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\n\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\n     *\n     * @param {number} statusCode The status code of the response.\n     * @param {string} statusText The status message of the response.\n     * @param {string | ArrayBuffer} content The content of the response.\n     */\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\n    constructor(\n        public readonly statusCode: number,\n        public readonly statusText?: string,\n        public readonly content?: string | ArrayBuffer) {\n    }\n}\n\n/** Abstraction over an HTTP client.\n *\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\n */\nexport abstract class HttpClient {\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\n     *\n     * @param {string} url The URL for the request.\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\n     */\n    public get(url: string): Promise<HttpResponse>;\n\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\n     *\n     * @param {string} url The URL for the request.\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\n     */\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\n        return this.send({\n            ...options,\n            method: \"GET\",\n            url,\n        });\n    }\n\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\n     *\n     * @param {string} url The URL for the request.\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\n     */\n    public post(url: string): Promise<HttpResponse>;\n\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\n     *\n     * @param {string} url The URL for the request.\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\n     */\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\n        return this.send({\n            ...options,\n            method: \"POST\",\n            url,\n        });\n    }\n\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\n     *\n     * @param {string} url The URL for the request.\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\n     */\n    public delete(url: string): Promise<HttpResponse>;\n\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\n     *\n     * @param {string} url The URL for the request.\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\n     */\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\n        return this.send({\n            ...options,\n            method: \"DELETE\",\n            url,\n        });\n    }\n\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\n     *\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\n     */\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\n\n    /** Gets all cookies that apply to the specified URL.\n     *\n     * @param url The URL that the cookies are valid for.\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\n     */\n    // @ts-ignore\n    public getCookieString(url: string): string {\n        return \"\";\n    }\n}\n"]}